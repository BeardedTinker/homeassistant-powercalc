{
  "config": {
    "abort": {
      "already_configured": "Sensor is already configured, specify a unique_id"
    },
    "step": {
      "user": {
        "title": "Choose your sensor type",
        "data": {
          "sensor_type": "Sensor type"
        }
      },
      "daily_energy": {
        "data": {
          "name": "[%key:common::config_flow::data::name%]",
          "unique_id": "Unique id",
          "value": "Value",
          "value_template": "Value template",
          "on_time": "On time",
          "start_time": "Start time",
          "unit_of_measurement": "Unit of measurement",
          "update_frequency": "Update frequency"
        },
        "data_description": {
          "on_time": "When left empty defaults to 1 day. always on",
          "update_frequency": "time in seconds between state updates of the sensor"
        }
      },
      "virtual_power": {
        "title": "Main configuration",
        "data": {
          "name": "[%key:common::config_flow::data::name%]",
          "mode": "Calculation mode",
          "entity_id": "Entity",
          "unique_id": "Unique id",
          "standby_power": "Standby power",
          "create_energy_sensor": "Create energy sensor",
          "create_utility_meters": "Create utility meters"
        }
      },
      "fixed": {
        "title": "Fixed mode config",
        "description": "Define a fixed power value for your entity. Alternatively you can define a power value per state. For example:\n\n`playing: 8.3`\n`paused: 2.25`",
        "data": {
          "power": "Power",
          "power_template": "Power template",
          "states_power": "States power"
        },
        "data_description": {
          "power": "A fix power value in Watt when the entity is ON",
          "power_template": "Template will be evaluated to get the power value in W",
          "states_power": "One 'state: power' pair on each row, see example above"
        }
      },
      "linear": {
        "title": "Linear mode config",
        "data": {
          "calibrate": "Calibration values",
          "min_power": "Min power",
          "max_power": "Max power",
          "gamma_curve": "Gamma curve",
          "attribute": "Attribute"
        },
        "data_description": {
          "calibrate": "Put a calibration value on each line. Example\n\n1 > 20\n10 > 40\n40 -> 200",
          "attribute": "Specify the attribute. When left empty will be brightness for lights and percentage for fans"
        }
      },
      "wled": {
        "title": "WLED mode config",
        "data": {
          "voltage": "Voltage",
          "power_factor": "Power factor"
        }
      }
    },
    "error": {
      "linear_mandatory": "You must supply at least one of max_power or calibrate",
      "linear_min_higher_as_max": "Max power cannot be lower than min power",
      "daily_energy_mandatory": "You must supply at least one of Value or Value template",
      "fixed_mandatory": "You must supply at least one of Power, Power template or States power",
      "fixed_states_power_only": "This entity can only work with 'states_power' not 'power'"
    }
  },
  "options": {
    "step": {
      "init": {
        "data": {
          "value": "[%key:component::powercalc::config::step::daily_energy::data::value%]",
          "standby_power": "[%key:component::powercalc::config::step::virtual_power::data::standby_power%]",
          "create_energy_sensor": "[%key:component::powercalc::config::step::virtual_power::data::create_energy_sensor%]",
          "create_utility_meters": "[%key:component::powercalc::config::step::virtual_power::data::create_utility_meters%]",
          "power": "[%key:component::powercalc::config::step::fixed::data::power%]",
          "power_template": "[%key:component::powercalc::config::step::fixed::data::power_template%]",
          "states_power": "[%key:component::powercalc::config::step::fixed::data::states_power%]",
          "calibrate": "[%key:component::powercalc::config::step::linear::data::calibrate%]",
          "min_power": "[%key:component::powercalc::config::step::linear::data::min_power%]",
          "max_power": "[%key:component::powercalc::config::step::linear::data::max_power%]",
          "gamma_curve": "[%key:component::powercalc::config::step::linear::data::gamma_curve%]",
          "attribute": "[%key:component::powercalc::config::step::linear::data::attribute%]"
        },
        "data_description": {
          "calibrate": "[%key:component::powercalc::config::step::linear::data_description::calibrate%]",
          "attribute": "[%key:component::powercalc::config::step::linear::data_description::attribute%]"
        }
      }
    },
    "error": {
      "linear_mandatory": "[%key:component::powercalc::config::error::linear_mandatory%]",
      "linear_min_higher_as_max": "[%key:component::powercalc::config::error::linear_min_higher_as_max%]",
      "fixed_mandatory": "[%key:component::powercalc::config::error::fixed_mandatory%]",
      "fixed_states_power_only": "[%key:component::powercalc::config::error::fixed_states_power_only%]"
    }
  }
}
